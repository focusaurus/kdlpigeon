{
// Package kdl parses [kdl][https://github.com/kdl-org/kdl/blob/main/SPEC.md]. [kdl.dev]().
//
package kdl

type ValueType int

const (
	NullValue ValueType = iota
	BoolValue
	Float64Value
	StringValue
)

type Value struct {
  Type ValueType
  Str string
  Float64 float64
  Bool bool
}

func (v *Value) String() string {
  switch v.Type {
  case NullValue:
    return "nil"
  case BoolValue:
    return fmt.Sprintf("%t", v.Bool)
  case Float64Value:
    return fmt.Sprintf("%f", v.Float64)
  case StringValue:
    return v.Str
  }
  return fmt.Sprintf("?val?")
}

func parseValue(v any) Value {
  if valBool, ok := v.(bool); ok {
    return Value{Type: BoolValue, Bool: valBool}
  }
  if valFloat64, ok := v.(float64); ok {
    return Value{Type: Float64Value, Float64: valFloat64}
  }
  if valString, ok := v.(string); ok {
    return Value{Type: StringValue, Str: valString}
  }
  return Value{Type: NullValue}
}

type ValueG[T bool|string|float64] struct {
  Value T
}

func (v *ValueG[T]) String() string {
  format := "%+v"
  switch any(v.Value).(type) {
  case bool:
    format = "%b"
  case string:
    format = "%s"
  case float64:
    format = "%d"
  }
  return fmt.Sprintf(format, v.Value)
}
/*
func parseValueG[T bool | string | float64](v any) ValueG[T] {
  switch v.(type) {
  case bool:
    vv, _ := v.(bool)
    return ValueG[T]{Value: vv}
  case string:
    return ValueG[T]{Value: v.(string)}
  case float64:
    return ValueG[T]{Value: v.(float64)}
  }
  return ValueG{}
}
*/
type Prop struct {
  Identifier string
  Value Value
}

type Node struct {
  Type string
  Identifier string
  Values []Value
  Props []Prop
  Children []Node
}

func (n *Node) String() string {
  rep := n.Identifier
  for _, prop := range n.Props {
    rep += fmt.Sprintf(`%s=%s `, prop.Identifier, prop.Value.String())
  }
  for _, val := range n.Values {
    rep += " " + fmt.Sprintf("%s", val.String())
    // switch val.Type {
    // case NullValue:
    // rep += "nil"
    // case BoolValue:
    // if val.Bool {
    // rep += "true"
    // } else {
    // rep += "false"
    // }
    // case Float64Value:
    // rep += fmt.Sprintf("%d", val.Float64)
    // case StringValue:
    // rep += val.Str
  // }
  }
  return rep
}

func parseNode(slashDashRaw, xtype, id, valuesRaw, childrenRaw interface{}) (interface{}, error) {
  if slashDashRaw != nil {
    return nil, nil
  }
  // parsing out the actual child nodes
  // from a sea of whitespace tokens is pretty horrible.
  // This approach does a brute force recursive traverse
  // of nested slices to find any actual Node types
  children := make([]Node, 0)
  values := make([]Value, 0)
  props := make([]Prop, 0)
  var walk func([]interface{})
  walk = func (kids []interface{}) {
    for _, kid := range kids {
      if kidSlice, ok := kid.([]interface{}); ok {
        walk(kidSlice)
        continue
      }
      if node, ok := kid.(Node); ok {
        fmt.Printf("Found child: %s\n", node.Identifier)
        children = append(children, node)
        continue
      }
      if prop, ok := kid.(Prop); ok {
        fmt.Printf("Found prop: %s\n", prop.Identifier)
        props = append(props, prop)
        continue
      }
      if value, ok := kid.(Value); ok {
        fmt.Printf("Found Value: %s\n", value.String())
        values = append(values, value)
        continue
      }
      // if kid == nil {
      //   values = append(values, Value{Type: NullValue})
      // }
      // values = append(values, parseValue(kid))
    }
  }
  spaceThenValues := toAnySlice(valuesRaw)
  walk(spaceThenValues)

  // fmt.Printf("values: %+v", spaceThenValues)
  // for _, spaceThenValue := range spaceThenValues {
  //   afterSpace := toAnySlice(spaceThenValue)[1]
  //   if prop, ok := afterSpace.(Prop); ok {
  //     props = append(props, prop)
  //     continue
  //   }
  //   if afterSpace == nil {
  //     values = append(values, Value{Type: NullValue})
  //     continue
  //   }
  //   values = append(values, parseValue(afterSpace))
  // }

  walk(toAnySlice(childrenRaw))
  node :=  Node {
    Identifier: string(id.([]byte)),
    Values: values,
    Props: props,
    Children: children,
  }
  if xtype != nil {
    node.Type = string(xtype.([]byte))
  }
  return node, nil
}

type Document struct {
  Nodes []Node
}

func toAnySlice(v any) []any {
    if v == nil {
        return nil
    }
    return v.([]any)
}

}

nodes = linespace* nodes:(node nodes?)? linespace* {
 var doc Document
 if nodes == nil {
   return doc, nil
 }
 parsedNodes := make([]Node, 0)
 for _, untypedNode := range nodes.([]interface{}) {
    if node, ok := untypedNode.(Node); ok {
      parsedNodes = append(parsedNodes, node)
      continue
    }
    if typedDoc, ok := untypedNode.(Document); ok {
      doc = typedDoc
    }
  }
  doc.Nodes = parsedNodes

  return doc, nil
}

node = slashDashRaw:("/-" node_space*)? xtype:xtype? id:identifier valuesRaw:(node_space+ node_prop_or_arg)* childrenRaw:(node_space* node_children ws*)? node_space* node_terminator {
  return parseNode(slashDashRaw, xtype, id, valuesRaw, childrenRaw)
}
node_terminator = single_line_comment / newline / ';' / eof
node_space = ws* escline ws* / ws+
escline = '\\' ws* (single_line_comment / newline)
node_children = ("/-" node_space*)? '{' nodes '}'
bom = '\uFEFF'
// TODO add rest from table in spec
unicode_space = [ \t\n\r\f]
ws = bom / unicode_space
// TODO add rest from table in spec
newline = [\n]
linespace = newline / ws / single_line_comment
single_line_comment = "//" newline+ (newline / eof)
identifier = [a-z0-9]i+ { return c.text, nil }
node_space = ws+
eof = !.
boolean = "true" { return true, nil } / "false" { return false, nil }
null = "null" { return nil, nil }
keyword = boolean / null
value = val:(number / keyword / xstring) {
  return parseValue(val), nil
}
xtype = "(" id:identifier ")" {
  return c.text[1:len(c.text)-1], nil
}
prop = id:identifier '=' val:value {
  // fmt.Printf("Found prop %s, %+v\n", string(id.([]byte)), val)
  return Prop {
    Identifier: string(id.([]byte)),
    Value: val.(Value),
  }, nil
}
node_prop_or_arg = ("/-" node_space*)? prop / value
number = '-'? integer ( '.' decimal_digit+ )? exponent? {
    // JSON numbers have the same syntax as Go's, and are parseable using
    // strconv.
    return strconv.ParseFloat(string(c.text), 64)
}

integer = '0' / non_zero_decimal_digit decimal_digit*

exponent = 'e'i [+-]? decimal_digit+

decimal_digit = [0-9]

non_zero_decimal_digit = [1-9]
escaped_char = [\x00-\x1f"\\]

single_char_escape = ["\\/bfnrt]

unicode_escape = 'u' hex_digit hex_digit hex_digit hex_digit

escape_sequence = single_char_escape / unicode_escape

xstring = '"' ( !escaped_char . / '\\' escape_sequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    return strconv.Unquote(string(c.text))
}
hex_digit = [0-9a-f]i

/*
nodes = linespace* (node nodes?)? linespace*
node = identifier (node_space+ value)*

identifier = bare_identifier

node = identifier (node_space+ value)* node_space* node_terminator
node_terminator = single_line_comment / newline / ';' / eof

Document = _ node:Node+ eof {
    return node, nil
}

Node = node:(Identifier) _ {
    return node, nil
}


BareIdentifier = id:()

Identifier = xstring / BareIdentifier


*/
